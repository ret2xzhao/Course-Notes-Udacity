1
00:00:00,000 --> 00:00:05,144
利用激光雷达 我们可以通过点云匹配来对汽车进行定位

2
00:00:05,144 --> 00:00:08,640
该方法将来自激光雷达传感器的检测数据

3
00:00:08,640 --> 00:00:12,665
与预先存在的高精度地图连续匹配

4
00:00:12,664 --> 00:00:15,479
通过这种比较 

5
00:00:15,480 --> 00:00:18,910
可获知汽车在高精度地图上的全球位置和行驶方向

6
00:00:18,910 --> 00:00:22,704
有许多算法可用于匹配点云

7
00:00:22,704 --> 00:00:27,199
迭代最近点（或 ICP）是一种方法

8
00:00:27,199 --> 00:00:30,910
假设我们想对两次点云扫描进行匹配

9
00:00:30,910 --> 00:00:33,594
对于第一次扫描中的每个点

10
00:00:33,594 --> 00:00:37,670
我们需要找到另一次扫描中最接近的匹配点

11
00:00:37,670 --> 00:00:41,984
最终我们会收集到许多匹配点对

12
00:00:41,984 --> 00:00:45,130
我们把每对点之间的距离误差相加

13
00:00:45,130 --> 00:00:50,335
然后计算平均距离误差

14
00:00:50,335 --> 00:00:52,270
我们的目标是通过点云旋转

15
00:00:52,270 --> 00:00:57,445
和平移来最大限度地降低这一平均距离误差

16
00:00:57,445 --> 00:01:01,509
一旦我们最大限度地降低了点云之间的误差

17
00:01:01,509 --> 00:01:05,120
我们就可以在传感器扫描和地图之间找到匹配

18
00:01:05,120 --> 00:01:08,960
我们将通过传感器扫描到的车辆位置转换为全球地图上的位置

19
00:01:08,959 --> 00:01:13,974
并计算出在地图上的精确位置

20
00:01:13,974 --> 00:01:18,709
滤波算法是另一种LiDAR 定位方法 

21
00:01:18,709 --> 00:01:22,219
滤波算法可消除冗余信息

22
00:01:22,219 --> 00:01:25,905
并在地图上找到最可能的车辆位置

23
00:01:25,905 --> 00:01:29,420
Apollo 使用了直方图滤波算法

24
00:01:29,420 --> 00:01:35,840
该方法有时也被称为误差平方和算法（或 SSD）

25
00:01:35,840 --> 00:01:38,365
为了应用直方图滤波

26
00:01:38,364 --> 00:01:44,280
我们将通过传感器扫描的点云滑过地图上的每个位置

27
00:01:44,280 --> 00:01:48,769
在每个位置

28
00:01:48,769 --> 00:01:53,834
我们计算扫描的点与高精度地图上的对应点之间的误差或距离

29
00:01:53,834 --> 00:01:56,914
然后对误差的平方求和

30
00:01:56,915 --> 00:01:58,710
求得的和越小

31
00:01:58,709 --> 00:02:02,219
扫描结果与地图之间的匹配越好

32
00:02:02,219 --> 00:02:06,590
该示例显示一些对齐较好的点 以红色表示

33
00:02:06,590 --> 00:02:10,875
以及一些对齐较差的点 以蓝色表示

34
00:02:10,875 --> 00:02:14,895
在该示例中 绿色表示中等对齐

35
00:02:14,895 --> 00:02:19,705
卡尔曼滤波是另一种LiDAR 定位方法

36
00:02:19,705 --> 00:02:23,515
卡尔曼滤波是一种算法

37
00:02:23,514 --> 00:02:27,984
用于根据我们在过去的状态和新的传感器测量结果预测我们当前的状态

38
00:02:27,985 --> 00:02:32,955
具体来说 卡尔曼滤波使用了预测更新周期

39
00:02:32,955 --> 00:02:37,840
首先 我们根据之前的状态以及对移动距离和方向的估计

40
00:02:37,840 --> 00:02:42,995
来估计或“预测”我们的新位置

41
00:02:42,995 --> 00:02:46,210
当然 我们的运动估计并不完美

42
00:02:46,210 --> 00:02:51,135
所以需要通过使用传感器测量我们的位置并加以纠正

43
00:02:51,134 --> 00:02:54,599
一旦用传感器测量了我们的新位置

44
00:02:54,599 --> 00:02:59,150
我们便可以使用概率规则 

45
00:02:59,150 --> 00:03:04,159
将也不完美的传感器测量结果与我们现有的位置预测结合起来

46
00:03:04,159 --> 00:03:07,069
我们会永远遵循这个预测更新周期

47
00:03:07,069 --> 00:03:10,430
只要我们需要对车辆进行定位

48
00:03:10,430 --> 00:03:16,534
先预测我们的新位置 然后用传感器测量我们的位置

49
00:03:16,534 --> 00:03:21,424
LiDAR 定位的主要优势在于稳健性

50
00:03:21,425 --> 00:03:26,125
只要从高精度地图开始 并且存在有效的传感器

51
00:03:26,125 --> 00:03:28,840
我们就始终能够进行定位

52
00:03:28,840 --> 00:03:31,810
主要缺点在于难以构建高精度地图

53
00:03:31,810 --> 00:03:35,819
并使其保持最新

54
00:03:35,819 --> 00:03:39,849
事实上 几乎不可能让地图完全保持最新

55
00:03:39,849 --> 00:03:43,935
因为几乎每个地图均包含瞬态元素

56
00:03:43,935 --> 00:03:46,974
汽车和行人 甚至停放的汽车

57
00:03:46,974 --> 00:03:50,294
在我们下次驾车驶过时都会消失

58
00:03:50,294 --> 00:03:53,289
街道上的垃圾会被吹走

59
00:03:53,289 --> 00:03:57,310
世界上的许多元素都在不断发生变化

