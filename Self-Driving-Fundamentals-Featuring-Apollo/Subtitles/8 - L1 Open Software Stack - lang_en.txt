1
00:00:00,000 --> 00:00:03,840
Hello, welcome to the open software stack.

2
00:00:03,840 --> 00:00:07,340
Let's first take a look at the overall framework.

3
00:00:07,340 --> 00:00:11,745
The open software layer is divided into three sub layers:

4
00:00:11,745 --> 00:00:17,685
real-time operating system(ROTS), Runtime Framework and a layer of application modules.

5
00:00:17,685 --> 00:00:20,995
The real-time operating system or RTOS,

6
00:00:20,995 --> 00:00:25,745
guarantees that certain task will be completed within a given time.

7
00:00:25,745 --> 00:00:28,320
Real-time refers to the fact that

8
00:00:28,320 --> 00:00:32,790
operating system of a self-driving car can produce timely calculations,

9
00:00:32,790 --> 00:00:37,220
analysis and execute corresponding actions in a short time,

10
00:00:37,220 --> 00:00:40,945
after the car sensors collect the data from the outside world.

11
00:00:40,945 --> 00:00:44,570
For example, imagine a self-driving car sensor detect a

12
00:00:44,570 --> 00:00:46,865
moving obstacle in front of the vehicle.

13
00:00:46,865 --> 00:00:49,880
In a short time,the Apollo software modules based on

14
00:00:49,880 --> 00:00:53,395
RTOS must analyze whether the obstacle is a pedestrian,

15
00:00:53,395 --> 00:00:55,535
or a car, or something else.

16
00:00:55,535 --> 00:00:58,010
Predict its future movement direction and

17
00:00:58,010 --> 00:01:01,665
speed, and determine whether to slow down or stop.

18
00:01:01,665 --> 00:01:04,595
Then the vehicle must execute that decision.

19
00:01:04,595 --> 00:01:07,790
Real-time performance is an important requirement for

20
00:01:07,790 --> 00:01:11,485
ensuring system stability and driving safety.

21
00:01:11,485 --> 00:01:18,135
Apollo RTOS is a combination of Ubuntu Linux operating system and the Apollo kernel.

22
00:01:18,135 --> 00:01:22,445
Ubuntu is one of the top Linux distributions in the industry,

23
00:01:22,445 --> 00:01:25,885
and the most popular operating system for the cloud.

24
00:01:25,885 --> 00:01:30,435
But the original Ubuntu system is not a real-time operating system.

25
00:01:30,435 --> 00:01:35,170
By adding in an Apollo-designed kernel, we can make it RTOS.

26
00:01:35,170 --> 00:01:39,440
The Runtime Framework is the operating environment of Apollo,

27
00:01:39,440 --> 00:01:42,210
which is a customized version of ROS.

28
00:01:42,210 --> 00:01:44,190
The Robot Operating System.

29
00:01:44,190 --> 00:01:47,195
Even though ROS, stands for Robot Operating System,

30
00:01:47,195 --> 00:01:52,350
it is actually a software framework that runs on top of the Apollo RTOS.

31
00:01:52,350 --> 00:01:57,360
ROS has a long history in the robotics industry and there are currently

32
00:01:57,360 --> 00:02:02,585
more than 3,000 basic libraries that support the rapid development of applications.

33
00:02:02,585 --> 00:02:07,850
ROS divides the autonomous system into multiple modules based on the function.

34
00:02:07,850 --> 00:02:10,440
Each module is responsible for receiving,

35
00:02:10,440 --> 00:02:13,830
processing and publishing its own messages.

36
00:02:13,830 --> 00:02:19,340
Because the modules are independent and communicate only through the Runtime Framework,

37
00:02:19,340 --> 00:02:22,725
adjusting any single module is easy.

38
00:02:22,725 --> 00:02:27,540
ROS is the most widely used robotic framework and thus,

39
00:02:27,540 --> 00:02:31,320
contains modules for many of the most recent breakthroughs.

40
00:02:31,320 --> 00:02:33,810
All of those features make ROS the ideal

41
00:02:33,810 --> 00:02:37,300
development and the integration framework for Apollo.

42
00:02:37,300 --> 00:02:40,845
In order to adapt ROS to self-driving cars,

43
00:02:40,845 --> 00:02:45,745
the Apollo team has improved functionality and performance for shared memory,

44
00:02:45,745 --> 00:02:49,345
decentralization and data comparability.

45
00:02:49,345 --> 00:02:54,960
Shared memory reduces the need to copy data if different modules require access.

46
00:02:54,960 --> 00:02:57,535
For a one-to-many transmission scenario

47
00:02:57,535 --> 00:03:01,810
shared memory supports the “write once, read multiple” pattern.

48
00:03:01,810 --> 00:03:08,115
For example, if you receive a point cloud once, you can run obstacle detection,

49
00:03:08,115 --> 00:03:12,230
localization, and GUI tools in parallel at the same time.

50
00:03:12,230 --> 00:03:15,535
This can accelerate communication.

51
00:03:15,535 --> 00:03:19,820
Decentralization solves the problem of a single point of failure.

52
00:03:19,820 --> 00:03:23,160
Off-the-shelf ROS is composed of many nodes.

53
00:03:23,160 --> 00:03:26,350
Each node has its own corresponding function.

54
00:03:26,350 --> 00:03:31,335
For example, one node may be responsible for collecting camera images,

55
00:03:31,335 --> 00:03:36,040
a different node might be responsible for planning a trajectory, and yet another node

56
00:03:36,040 --> 00:03:40,830
might be responsible for sending control commands to the vehicle on the canbus.

57
00:03:40,830 --> 00:03:44,840
But all these nodes need to be controlled by a single ROS master node.

58
00:03:44,840 --> 00:03:46,890
If this master node fails,

59
00:03:46,890 --> 00:03:48,920
the entire system will fail.

60
00:03:48,920 --> 00:03:51,030
To avoid this problem,

61
00:03:51,030 --> 00:03:54,990
Apollo brings all the nodes together into a common domain.

62
00:03:54,990 --> 00:04:00,200
Each node in the domain has the information about the other nodes in the domain.

63
00:04:00,200 --> 00:04:02,705
Through this decentralization scheme,

64
00:04:02,705 --> 00:04:06,580
the common domain has replaced the original ROS Master node.

65
00:04:06,580 --> 00:04:11,294
Thus, the risk of a single point of failure has been eliminated.

66
00:04:11,294 --> 00:04:16,110
For self-driving, due to the large size of the project itself.

67
00:04:16,110 --> 00:04:18,425
Data compatibility is crucial.

68
00:04:18,425 --> 00:04:21,280
Different ROS nodes communicate with each other

69
00:04:21,280 --> 00:04:24,320
through an interface language called ROS Message.

70
00:04:24,320 --> 00:04:27,820
ROS Message requires a common interface language so that

71
00:04:27,820 --> 00:04:31,565
each node can interpret the Message data from the other nodes.

72
00:04:31,565 --> 00:04:34,450
If the format in the Message file is even

73
00:04:34,450 --> 00:04:37,400
slightly different from what a node is expecting,

74
00:04:37,400 --> 00:04:39,625
the communication will simply fail.

75
00:04:39,625 --> 00:04:42,990
This can lead to serious compatibility issues.

76
00:04:42,990 --> 00:04:46,620
For example, when an interface is upgraded,

77
00:04:46,620 --> 00:04:50,470
data incompatibility will often result in system failure.

78
00:04:50,470 --> 00:04:53,590
Also, previous recorded test data must be

79
00:04:53,590 --> 00:04:58,015
converted again and again to adapt to new message formats.

80
00:04:58,015 --> 00:04:59,745
To solve this problem,

81
00:04:59,745 --> 00:05:02,530
the Apollo team uses another interface language

82
00:05:02,530 --> 00:05:05,905
called Protobuf instead of native ROS Message.

83
00:05:05,905 --> 00:05:09,535
Protobuf is a method of serializing structured data.

84
00:05:09,535 --> 00:05:12,834
It is used in developing programs to communicate

85
00:05:12,834 --> 00:05:16,565
with each other over a wire or for storing data.

86
00:05:16,565 --> 00:05:21,905
You can add new fields to your message formats without breaking backwards-compatibility.

87
00:05:21,905 --> 00:05:25,975
New binaries can accept the old message format during parsing

88
00:05:25,975 --> 00:05:31,420
Adding the protobuf format to ROS helps the long term development of Apollo.

89
00:05:31,420 --> 00:05:36,355
Now, let's focus on the core content of this course, application modules.

90
00:05:36,355 --> 00:05:40,295
Apollo software platform has a variety of modules.

91
00:05:40,295 --> 00:05:44,629
These modules include MAP engine, localization, perception,

92
00:05:44,629 --> 00:05:51,190
planning, control, end-to-end driving and the human-machine interface or HMI.

93
00:05:51,190 --> 00:05:54,290
Each module has its own algorithm library,

94
00:05:54,290 --> 00:05:57,775
and the relationships between the modules are complex.

95
00:05:57,775 --> 00:06:00,380
We will study those modules and how they are

96
00:06:00,380 --> 00:06:03,080
related to each other throughout this course.

