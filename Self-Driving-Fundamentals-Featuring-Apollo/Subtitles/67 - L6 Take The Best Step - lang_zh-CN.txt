1
00:00:00,980 --> 00:00:02,960
从初始节点开始

2
00:00:03,220 --> 00:00:06,280
我们需要确定 8 个相邻节点中

3
00:00:06,280 --> 00:00:08,140
哪个是最有希望的候选节点

4
00:00:08,860 --> 00:00:10,640
对于每个候选节点

5
00:00:10,640 --> 00:00:12,120
我们考虑两件事情

6
00:00:12,700 --> 00:00:13,280
首先

7
00:00:13,280 --> 00:00:18,220
我们计算从开始节点到候选节点的成本

8
00:00:18,840 --> 00:00:19,660
然后

9
00:00:19,660 --> 00:00:24,200
我们估计从候选节点前往目的地的成本

10
00:00:24,980 --> 00:00:28,240
计算前往候选节点的成本很容易

11
00:00:28,240 --> 00:00:30,500
因为它已经与我们相邻

12
00:00:31,200 --> 00:00:35,200
计算从候选节点到目的地的成本很困难

13
00:00:35,500 --> 00:00:37,640
但是 通过简单计算

14
00:00:38,080 --> 00:00:41,800
从候选节点到目的地的距离 我们通常可以做出很好的估计

15
00:00:43,060 --> 00:00:47,040
我们使用变量 g 和 h 来表示每个成本

16
00:00:47,740 --> 00:00:52,260
g 值为从开始节点前往候选节点的成本

17
00:00:52,820 --> 00:00:56,920
h 值为从候选节点

18
00:00:57,220 --> 00:00:59,780
前往目的地的估计成本或启发式成本

19
00:01:00,700 --> 00:01:02,360
根据我们的具体情况

20
00:01:02,580 --> 00:01:05,240
我们可以自定义成本估算方式

21
00:01:05,880 --> 00:01:09,860
例如 交通堵塞会增加前往目的地的成本

22
00:01:10,360 --> 00:01:13,920
所以交通繁忙的路径具有更高的成本

23
00:01:15,120 --> 00:01:16,480
对于每个候选节点

24
00:01:16,480 --> 00:01:19,880
我们通过添加 g 值和 h 值来计算总和

25
00:01:19,880 --> 00:01:21,360
即 f 值

26
00:01:22,040 --> 00:01:26,480
最佳候选节点是 f 值最小的节点

27
00:01:27,640 --> 00:01:29,380
每当我们抵达新节点时

28
00:01:29,500 --> 00:01:32,940
我们通过重复此过程来选择下一个候选节点

29
00:01:33,300 --> 00:01:35,940
而且总是选择我们尚未访问过

30
00:01:35,940 --> 00:01:37,600
且具有最小 f 值的节点

31
00:01:38,420 --> 00:01:40,360
这就是 A * 算法

32
00:01:40,680 --> 00:01:44,540
它建立了一条稳定前往目的地的路径

