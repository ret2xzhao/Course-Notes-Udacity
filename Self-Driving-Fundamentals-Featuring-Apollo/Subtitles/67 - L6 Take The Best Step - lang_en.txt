1
00:00:00,980 --> 00:00:02,960
Starting at the initial node,

2
00:00:03,220 --> 00:00:06,280
we need to decide which of the 8 adjacent nodes

3
00:00:06,280 --> 00:00:08,140
is the most promising candidate.

4
00:00:08,860 --> 00:00:10,640
For each of the candidate nodes, 

5
00:00:10,640 --> 00:00:12,120
we consider two things.

6
00:00:12,700 --> 00:00:13,280
First,

7
00:00:13,280 --> 00:00:18,220
we calculate the cost it takes to travel from the start node to that candidate node.

8
00:00:18,840 --> 00:00:19,660
Second,

9
00:00:19,660 --> 00:00:24,200
we estimate how much it costs to travel from that candidate node to the goal.

10
00:00:24,980 --> 00:00:28,240
It’s easy to calculate the cost to arrive at the candidate node,

11
00:00:28,240 --> 00:00:30,500
because it’s already adjacent to us.

12
00:00:31,200 --> 00:00:35,200
It’s harder to calculate the cost to go from the candidate node to the goal.

13
00:00:35,500 --> 00:00:37,640
But, usually we can generate a good estimate, 

14
00:00:38,080 --> 00:00:41,800
often by simply measuring the distance from the candidate node to the goal.

15
00:00:43,060 --> 00:00:47,040
We use the variables g and h to represent each of these costs. 

16
00:00:47,740 --> 00:00:52,260
The g value is the cost to travel from the start node to the candidate node,

17
00:00:52,820 --> 00:00:56,920
and the h value is the estimated cost, or heuristic cost,

18
00:00:57,220 --> 00:00:59,780
to travel from the candidate node to the goal.

19
00:01:00,700 --> 00:01:02,360
Depending on our circumstances, 

20
00:01:02,580 --> 00:01:05,240
we can customize the way we estimate our costs.

21
00:01:05,880 --> 00:01:09,860
For example, traffic jams increase the cost of travelling to our destination,

22
00:01:10,360 --> 00:01:13,920
so a path with heavy traffic should incorporate larger costs.

23
00:01:15,120 --> 00:01:16,480
For each candidate node, 

24
00:01:16,480 --> 00:01:19,880
we add our g and h values to calculate a sum,

25
00:01:19,880 --> 00:01:21,360
called the f value.

26
00:01:22,040 --> 00:01:26,480
The best candidate node is the node with the least expensive f value.

27
00:01:27,640 --> 00:01:29,380
Every time we reach a new node,

28
00:01:29,500 --> 00:01:32,940
we repeat this process to select our next candidate node,

29
00:01:33,300 --> 00:01:35,940
always selecting the node with the lowest f value

30
00:01:35,940 --> 00:01:37,600
that we have not yet visited.

31
00:01:38,420 --> 00:01:40,360
This is the A* algorithm.

32
00:01:40,680 --> 00:01:44,540
It builds a path the steadily makes its way toward the goal. 

