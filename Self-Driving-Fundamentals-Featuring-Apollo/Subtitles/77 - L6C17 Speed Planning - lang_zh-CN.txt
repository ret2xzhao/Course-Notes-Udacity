1
00:00:00,270 --> 00:00:03,964
为构建最佳速度曲线

2
00:00:03,964 --> 00:00:07,839
我们需要将 ST 图离散为多个单元格

3
00:00:07,839 --> 00:00:10,460
单元格之间的速度有所变化

4
00:00:10,460 --> 00:00:13,445
但在每个单元格内 速度保持不变

5
00:00:13,445 --> 00:00:15,820
该方法可简化速度曲线的构建

6
00:00:15,820 --> 00:00:20,039
并维持曲线的近似度

7
00:00:20,039 --> 00:00:21,750
在 ST 图中

8
00:00:21,750 --> 00:00:24,640
可以将障碍物绘制为在特定时间段内

9
00:00:24,640 --> 00:00:27,714
阻挡道路的某些部分的矩形

10
00:00:27,714 --> 00:00:31,660
例如 假设预测模块预测车辆

11
00:00:31,660 --> 00:00:35,704
将在 t0 到 t1 的时间段内驶入我们的车道

12
00:00:35,704 --> 00:00:40,929
由于该车将在此期间占据位置 s0 到 s1

13
00:00:40,929 --> 00:00:44,979
因此我们在 ST 图上绘制了一个矩形

14
00:00:44,979 --> 00:00:49,929
它将在时间段 t0 到 t1 期间阻挡位置 s0 到 s1

15
00:00:49,929 --> 00:00:52,990
为避免碰撞

16
00:00:52,990 --> 00:00:57,039
速度曲线不得与此矩形相交

17
00:00:57,039 --> 00:01:01,600
既然有了一张各种单元格被阻挡的 ST 图

18
00:01:01,600 --> 00:01:06,575
我们便可以使用优化引擎为该图选择最佳的速度曲线

19
00:01:06,575 --> 00:01:10,600
优化算法通过复杂的数学运算来搜索

20
00:01:10,599 --> 00:01:14,439
受到各种限制的低成本解决方案

21
00:01:14,439 --> 00:01:18,609
这些限制可能包括：法律限制 如速度限制 

22
00:01:18,609 --> 00:01:22,150
距离限制 如与障碍物的距离

23
00:01:22,150 --> 00:01:26,510
汽车的物理限制 如加速度限制

