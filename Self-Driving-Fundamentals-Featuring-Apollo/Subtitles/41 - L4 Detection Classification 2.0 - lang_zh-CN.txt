1
00:00:00,000 --> 00:00:03,540
在感知任务中

2
00:00:03,540 --> 00:00:07,645
首先想到的是障碍物检测和分类

3
00:00:07,644 --> 00:00:10,884
在驾驶过程中会遇到许多障碍物

4
00:00:10,884 --> 00:00:13,419
静态障碍物包括墙壁、

5
00:00:13,419 --> 00:00:16,394
树木、杆子和建筑物

6
00:00:16,394 --> 00:00:18,980
动态障碍物包括行人、

7
00:00:18,980 --> 00:00:21,649
自行车和各种汽车

8
00:00:21,649 --> 00:00:25,449
计算机首先需要知道这些障碍物的位置

9
00:00:25,449 --> 00:00:27,254
然后对它们进行分类

10
00:00:27,254 --> 00:00:32,134
在路中行驶的无人驾驶车可能会探测到许多不同的物体

11
00:00:32,134 --> 00:00:35,799
汽车根据所感知的物体类型

12
00:00:35,799 --> 00:00:38,544
来确定路径和速度

13
00:00:38,545 --> 00:00:41,320
如果感知到前方有一辆自行车

14
00:00:41,320 --> 00:00:46,399
汽车可能会决定减速和变道 以便安全驶过自行车

15
00:00:46,399 --> 00:00:50,244
但是 如果感知到前方有另一辆车

16
00:00:50,244 --> 00:00:53,579
并预测到前方车辆也将以接近限速的速度行驶

17
00:00:53,579 --> 00:00:58,494
无人驾驶车可能会保持其速度和车道

18
00:00:58,494 --> 00:01:03,004
另一个示例为交通信号灯检测分类

19
00:01:03,005 --> 00:01:08,674
首先 我们将使用计算机视觉对图像中的交通信号灯进行定位

20
00:01:08,674 --> 00:01:14,224
然后 我们可以根据灯光显示颜色对交通信号灯进行分类

21
00:01:14,224 --> 00:01:16,259
在无人驾驶车辆中

22
00:01:16,260 --> 00:01:19,829
我们使用什么算法来对障碍物进行检测和分类？

23
00:01:19,829 --> 00:01:26,234
我们可以先使用检测 CNN 来查找图像中的对象的位置

24
00:01:26,234 --> 00:01:29,579
在对图像中的对象进行定位后

25
00:01:29,579 --> 00:01:33,844
我们可以将图像发送给另一个 CNN 进行分类

26
00:01:33,844 --> 00:01:40,995
我们也可以使用单一 CNN 体系结构对对象进行检测和分类

27
00:01:40,995 --> 00:01:43,290
一种通常的做法为

28
00:01:43,290 --> 00:01:48,105
在单个网络体系结构的末端附加几个不同的“头”

29
00:01:48,105 --> 00:01:50,910
一个头可能执行检测

30
00:01:50,909 --> 00:01:53,670
另一个则可能执行分类

31
00:01:53,670 --> 00:02:01,530
一个经典的体系结构为 R-CNN 及其变体 Fast R-CNN 和 Faster R-CNN

32
00:02:01,530 --> 00:02:06,890
YOLO 和 SSD 是具有类似形式的不同体系结构

